┌─────────────────────────────────────────────────────────────┐
│                     J E L L Y M A C                         │
│          Automated Media Assistant for macOS                │
└─────────────────────────────────────────────────────────────┘

                 Welcome to JellyMac! 👋

This guide will help you set up and use JellyMac, a tool designed 
to make managing your media library much easier on macOS.
Whether you're new to media automation, or a seasoned bash developer,
we think this project has something to offer for anyone that uses a Mac.

JellyMac is a lightweight, macOS-centric automation suite 
for media management, particularly for users of Jellyfin media server.
It leverages Bash scripting and common command-line tools to
monitor clipboard events (YouTube links, magnet links) and a
designated "drop folder" for new media. It then processes
these items — downloading, renaming, organizing, transferring (if needed)
— and optionally integrates with Jellyfin for automatic library updates.
This enables full end-to-end automation for media additions to your library
with just 2 clicks once JellyMac is running.

TABLE OF CONTENTS
-----------------
🏠 COMPATIBILITY ......................... Line 38
🔧 FUNCTIONALITY ......................... Line 51  
🔒 BEFORE YOU START ...................... Line 96
⚙️ INSTALLATION .......................... Line 139
🚀 FIRST RUN EXPERIENCE .................. Line 183
⚙️ CONFIGURATION ......................... Line 219
📱 DAILY USAGE ........................... Line 284
🌐 NETWORK SETUP ......................... Line 313
💡 PLAYBACK SUGGESTIONS .................. Line 336
🛠️ TROUBLESHOOTING ....................... Line 373
🙏 ACKNOWLEDGEMENTS ...................... Line 412
📋 ROADMAP AND FUTURE PLANS .............. Line 450

COMPATIBILITY
----------------
JellyMac runs on your Mac to automate your media pipeline.
While it offers direct library scan integration for Jellyfin
servers, its core download and organization features are
designed to work seamlessly with any media server (including
Plex, Emby, etc.) that monitors standard Movie and TV Show
folder structures.

The media server itself can be hosted on Linux, Windows, macOS, or a NAS,
as long as your Mac can write to the media library folders
(e.g., via network shares like SMB or NFS).

FUNCTIONALITY
----------------
JellyMac simplifies managing your media library by:

  1. Watching your clipboard for:
     - YouTube links (automatically downloads videos)
     - Magnet links (sends them to Transmission)

  2. Monitoring a "drop folder" where you can place:
     - Movies (loose files or in folders)
     - TV Show Episodes for organization

  Once JellyMac detects new media, it automatically:
     - Cleans filenames for better server matching
       (especially for Jellyfin and Plex).
     - Moves files to your configured library folders for Shows and Movies.
     -Sorts the files into the proper structure for Movies and for Shows
     - Can automatically trigger an update to the server so it shows the new content right away

Here's a summary of its capabilities:

  1. Process Media Files

     - Drop media into the watched `DROP_FOLDER`.
     - Identifies movies and TV shows.
     - Files are cleaned and organized.
     - Associated files (e.g., subtitles) are kept together.

  2. Handle YouTube Videos

     - Copy a YouTube URL to your clipboard.
     - Videos download at your preferred quality.
     - Placed in your designated YouTube folder (which can
       be a local folder or a network share pointing to
       your server's library).

  3. Process Torrents
     - Copy a magnet link to your clipboard.
     - Link is automatically added to Transmission.
     - When complete, Transmission can be configured to automatically move
       the file to your JellyMac `DROP_FOLDER`. JellyMac then
       processes and sorts it into your library
       destination folder


BEFORE YOU START
----------------

SECURITY NOTE:

     - Always review scripts before running them, or use an AI tool like ChatGPT to help check them.
       They are in plain text and are commented to help explain what they do.

     - This project uses third-party tools and their required dependencies:
       flock, yt-dlp, transmission-cli, ffmpeg

     - Do NOT run this script as root (sudo is not  needed or recommended).
      
     - Protect your API keys; never share them under any circumstances.

     - This is BETA software that manages files.
       ALWAYS KEEP BACKUPS OF IMPORTANT FILES AND MEDIA!

     - This software has no external networking capabilities other than what you set up for it
       JellyMac will not now or ever "phone-home" or collect your data in any way.
       It will remain free, transparent, and open to all

Setup Instructions
------------------

You'll need:

  1. A Mac running macOS
     - Tested and working well on macOS Sequoia, Sonoma, and Ventura.
     - Should still work on older versions, but dependencies will take longer to 
       install and may stress your system as they are compliled for your version.
     - Bash 3.2 (pre-installed on modern Macs).

  2. Homebrew Package Manager
     - If you don't have it, install from https://brew.sh


  3. (Optional) A Media Server (Jellyfin, Plex, Emby, etc.)
     - Can be running locally or on another computer/NAS.
     - If using Jellyfin and want auto-scans:
       - You'll need its address (e.g., http://server-ip:8096).
       - You'll need a Jellyfin API key (see Configuration below).

INSTALLATION
------------

  Step 1: Install Homebrew (If You Don't Have It)
  -------------------------------------------------
  Homebrew is a package manager for macOS and is a prerequisite for
  JellyMac, as it's used to install necessary helper tools like
  yt-dlp, ffmpeg, and Transmission.

  If you don't already have Homebrew, open your Terminal app (usually
  found in /Applications/Utilities/) and run the following command.
  Follow the on-screen instructions provided by the Homebrew
  installer:

      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  Important: After Homebrew installs, it might show you one or two
  commands to add Homebrew to your PATH (e.g., for Apple Silicon:
  `echo 'eval $(/opt/homebrew/bin/brew shellenv)' >> ~/.zprofile`).
  Please copy and run those exact commands in your Terminal before
  proceeding to the next step. You typically only need to do this once.
  If you're unsure, closing and reopening your Terminal window after
  Homebrew installation often helps.


  Step 2: Run the JellyMac Installer
  ----------------------------------
  Once Homebrew is installed and configured in your PATH, run the
  following single command in your Terminal. This command will:
    • Download the JellyMac installation script.
    • The script then checks for and installs Git (via Homebrew)
      if it's not already present.
    • Clones the JellyMac project from GitHub into `~/JellyMac`.
    • Makes the core JellyMac scripts executable.
    • Automatically launches `jellymac.sh` to begin the interactive
      first-run setup experience (detailed in the "FIRST RUN
      EXPERIENCE" section below).

      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Mtn-Man/JellyMac/dev/install.sh)"

  After running this command, the JellyMac setup wizard will start
  automatically.


FIRST RUN EXPERIENCE
-------------------

After you run `./jellymac.sh`, the setup assistant will guide you through:

• Dependency checks and automated installation offers
• Path validation and directory creation
• Transmission service setup for magnet link automation
• Automatic Transmission download location configuration (recommended)

Complete Magnet Link Automation Setup:

JellyMac will automatically offer to configure Transmission during setup.
When prompted with "Auto-configure Transmission download location? (Y/n):",
press Enter (or Y) to let JellyMac configure everything automatically.

This automatic setup will:
• Set Transmission's download location to your DROP_FOLDER
• Enable the complete automation chain without manual configuration

If automatic configuration fails or you prefer manual setup:
       a) Open http://localhost:9091 in your browser
       b) Click the hamburger menu (≡) at the top right  
       c) Select 'Edit Preferences' from the menu
       d) In the Downloads section, set Download location to your DROP_FOLDER:
          Example: /Users/YourName/Downloads/JellyDrop
       
       This enables the full automation chain:
       Copy magnet link → Transmission downloads → JellyMac processes → Media organized → Jellyfin updated
       
         Manual Transmission Management (Advanced):
       - Start service: brew services start transmission
       - Stop service: brew services stop transmission  
       - Restart service: brew services restart transmission


CONFIGURATION
-------------

For many users, JellyMac's interactive setup wizard handles
all necessary configuration during the first run. However,
if you're someone like me you will want to customize settings for:

• Advanced media server integration (Jellyfin API, custom paths)
• Network storage and SMB/NFS shares
• Custom download quality settings
• Specialized folder structures


Basic Configuration:
The main configuration file is located at:
  ~/JellyMac/lib/jellymac_config.sh

Most Common Settings:
• Media server integration (Jellyfin):
  - JELLYFIN_SERVER="http://your-server-ip:8096"
  - JELLYFIN_API_KEY="your-api-key"
  - Enable auto-scans: ENABLE_JELLYFIN_SCAN_MOVIES="true"

• Custom library paths:
  - DEST_DIR_MOVIES="/path/to/your/Movies"
  - DEST_DIR_SHOWS="/path/to/your/Shows"
  - DEST_DIR_YOUTUBE="/path/to/your/YouTube"

Jellyfin Server Integration (Optional):
-------------------------------------
If you use Jellyfin and want automatic library scans when new media arrives,
configure these settings in your jellymac_config.sh file:

1. Server Connection:
   JELLYFIN_SERVER="http://your-server-ip:8096"
   (Example: http://192.168.0.100:8096)

2. API Authentication:
   JELLYFIN_API_KEY="your-jellyfin-api-key"
   
   To get your API key:
   1. Open Jellyfin web interface
   2. Click user icon → Dashboard → API Keys
   3. Click "+" to create new key
   4. Name it "JellyMac" and copy the generated key
   5. Paste it into jellymac_config.sh as the JELLYFIN_API_KEY value

3. Enable Auto-Scans:
   After configuring your server and API key, enable automatic library scans:
   ENABLE_JELLYFIN_SCAN_MOVIES="true"    # Scan after new movies
   ENABLE_JELLYFIN_SCAN_SHOWS="true"     # Scan after new TV shows
   ENABLE_JELLYFIN_SCAN_YOUTUBE="true"   # Scan after new YouTube videos

Note: These settings are optional. JellyMac works perfectly fine without
Jellyfin integration - it will still organize your media files automatically.

For Complete Configuration Options:
See the comprehensive Configuration_Guide.txt in your
JellyMac folder for detailed explanations of all 50+
available settings.

After making changes:
Save the file and restart JellyMac for changes to take effect.


DAILY USAGE
-----------

Once setup is complete:

  Starting JellyMac:

       cd ~/JellyMac && ./jellymac.sh
      
  Using JellyMac:

       - Drop media files into your configured DROP_FOLDER
       - Copy YouTube URLs to your clipboard
       - Copy magnet links to your clipboard
       - Watch the Terminal window for progress logs
       - Check macOS notifications (if enabled)

  Stopping JellyMac:

       Press Ctrl+C in the Terminal window


ADVANCED: Sonarr/Radarr Integration
-----------------------------------

See `Arr_Suite_Handoff_Guide.txt` in the main JellyMac folder for 
instructions if you use Sonarr or Radarr.


NETWORK SETUP (If your media server is on another computer)
-----------------------------------------------------------

If your media library folders (e.g., Movies, Shows) are on a
NAS or another computer on the network, create a network share, then ensure it is mounted on your Mac:

  1. Mount Your Media Shares:
       - In Finder, press Cmd+K (Go > Connect to Server...).
       - Enter the server address, e.g.,
         `smb://server-ip/MediaShareName` or
         `nfs://server-ip/path/to/export`
       - Ensure the mount point matches what you've set for
         `DEST_DIR_MOVIES`, etc., in `lib/jellymac_config.sh`
         (e.g., `/Volumes/MediaShareName/Movies`).

  2. Test Your Setup:
       - Can you access your media server (Jellyfin, Plex)
         from your Mac's Finder?
       - Can you manually copy a file from your Mac to the
         mounted network shares in Finder?
       - Is your network connection stable?


PLAYBACK SUGGESTIONS
--------------------

For local video playback, the default QuickTime Player lacks support
for modern video codecs (e.g. HEVC/VP9/AV1), which will likely cause playback issues
with many of JellyMac's YouTube downloads - as well as other media files.

During JellyMac's first run, you'll be offered the option to install and configure
IINA as your default media player. IINA is a free, open source app that provides 
excellent codec support and handles modern video formats that QuickTime Player cannot play.

If you accept IINA installation:
- JellyMac will install IINA via Homebrew
- IINA will be set as the default player for media files
- Enhanced codec support for all downloaded content

If you decline IINA installation:
You have several excellent alternatives for playing modern video formats:

Primary Recommendation:
- Jellyfin Server: Host your media locally or remotely, then play back 
  in any web browser on any computer on your network.
  Find out more: https://jellyfin.org

Alternatively, there are many reliable, free video players for macOS,
including:

  - Infuse: https://firecore.com/infuse        (can sync with a Jellyfin or Plex library)
  - VLC:    https://www.videolan.org/vlc/      or      brew install --cask vlc
  - and others...

In a pinch, Google Chrome can also play many media formats, if you already have that installed.

Note: If you initially declined IINA during setup, you can always install it later
using: brew install --cask iina


TROUBLESHOOTING
---------------

  1. Common Issues:

       - Permission Problems:
           JellyMac needs to read from your `DROP_FOLDER`
           and write to your destination directories.
           * Check ownership/permissions: `ls -la [directory]`
           * Fix (example): 
           
           chmod u+rwx [directory]             (Gives your user account read, write, execute)

       - Network Share Issues:
           * Ensure shares are mounted before starting.
           * Verify paths in `lib/jellymac_config.sh` are
             correct for the mounted shares.
           * Check server/NAS permissions for your Mac user.

       - "Command not found" for `yt-dlp`, `flock`, etc.:
           * Ensure Homebrew is installed and its bin directory
             (usually `/opt/homebrew/bin`) is in your PATH.
           * Let JellyMac's first-run interactive setup
             install them, or install them manually.
           * Ensure installed homebrew programs are updated, run: brew upgrade && brew update

  2. View the Logs:
       Logs are crucial for diagnosing issues.
       Location: `~/JellyMac/logs/`
       Current log: `jellymac_automator_log_YYYY-MM-DD.log`

  3. Starting Over / Re-checking Config:
       - Stop JellyMac (Ctrl+C in Terminal).
       - Carefully review paths in `lib/jellymac_config.sh`.
       - Verify network shares are mounted and writable.
       - Re-run: `./jellymac.sh`
         (It will re-validate dependencies and paths).


ACKNOWLEDGEMENTS
----------------

JellyMac would not be possible without the incredible work of the
open-source community and the developers behind the powerful tools
it leverages. We extend our sincere gratitude to:

  - The yt-dlp team: For creating and maintaining the premier
    command-line program for downloading video and audio from a
    vast array of websites. Your dedication to this tool is
    invaluable.

  - The FFmpeg developers: For providing a complete, cross-platform
    solution to record, convert, and stream audio and video.
    FFmpeg is the backbone of countless media projects.

  - The Transmission project: For a reliable and efficient
    BitTorrent client, including the `transmission-cli` that
    enables seamless automation.

  - The Homebrew maintainers and contributors: For making it
    incredibly easy to install and manage software packages on
    macOS, which greatly simplifies JellyMac's dependency
    management.

  - The developers of core Unix utilities like `git`, `curl`,
    `flock`, and the Bash shell itself, which form the foundation
    of JellyMac's operations.

We also acknowledge the countless developers who contribute to the
dependencies of these projects. The open-source ecosystem is a
collaborative effort, and JellyMac benefits immensely from this
shared knowledge and dedication.

Thank you for building and sharing such robust, open, and powerful
tools!


ROADMAP AND FUTURE PLANS
------------------------

JellyMac is in ongoing active development.
Planned future features include:

  - YouTube playlist support
  - Movie/TV Show season/collection/pack handling
  - Mixed content (movies and TV shows) folder handling
  - Improved file recognition and filtering
  - Improved naming consistency of youtube video titles
  - Advanced workflow guidance, use-case documentation, wiki guides
  - Enhanced and user friendly GUI (graphical) version in Swift
    (maybe menu bar app?)

Your feedback is incredibly valuable!

If you find bugs, please submit them by clicking on the "Issues" tab in 
our project's GitHub page and reporting them there.

Contributions or forks are more than welcome, it is all just bash - hack away!

If you have suggestions for new features, want to contribute or have any questions, 
you can contact me directly:

elisher@duck.com

Thank you for giving JellyMac a chance!

✨ Happy automating! ✨
